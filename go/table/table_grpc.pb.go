// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: protos/table.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TablesClient is the client API for Tables service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TablesClient interface {
	CreateTable(ctx context.Context, in *CreateTableRequest, opts ...grpc.CallOption) (*CreateTableResponse, error)
	UpdateTable(ctx context.Context, in *UpdateTableRequest, opts ...grpc.CallOption) (*UpdateTableResponse, error)
	DeleteTable(ctx context.Context, in *DeleteTableRequest, opts ...grpc.CallOption) (*DeleteTableResponse, error)
	ReadTablesOfRoom(ctx context.Context, in *ReadTablesOfRoomRequest, opts ...grpc.CallOption) (*ReadTablesOfRoomResponse, error)
	CreatePanorama(ctx context.Context, in *CreatePanoramaRequest, opts ...grpc.CallOption) (*CreatePanoramaResponse, error)
	UpdatePanorama(ctx context.Context, in *UpdatePanoramaRequest, opts ...grpc.CallOption) (*UpdatePanoramaResponse, error)
	DeletePanorama(ctx context.Context, in *DeletePanoramaRequest, opts ...grpc.CallOption) (*DeletePanoramaResponse, error)
	ReadPanoramasOfRoom(ctx context.Context, in *ReadPanoramasOfRoomRequest, opts ...grpc.CallOption) (*ReadPanoramasOfRoomResponse, error)
	CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*CreateRoomResponse, error)
	UpdateRoom(ctx context.Context, in *UpdateRoomRequest, opts ...grpc.CallOption) (*UpdateRoomResponse, error)
	DeleteRoom(ctx context.Context, in *DeleteRoomRequest, opts ...grpc.CallOption) (*DeleteRoomResponse, error)
	ReadRoomsById(ctx context.Context, in *ReadRoomsByIdRequest, opts ...grpc.CallOption) (*ReadRoomsByIdResponse, error)
	ReadRoomsOfProject(ctx context.Context, in *ReadRoomsOfProjectRequest, opts ...grpc.CallOption) (*ReadRoomsOfProjectResponse, error)
	CreatePoint(ctx context.Context, in *CreatePointRequest, opts ...grpc.CallOption) (*CreatePointResponse, error)
	UpdatePoint(ctx context.Context, in *UpdatePointRequest, opts ...grpc.CallOption) (*UpdatePointResponse, error)
	DeletePoint(ctx context.Context, in *DeletePointRequest, opts ...grpc.CallOption) (*DeletePointResponse, error)
	ReadPointsOfPanorama(ctx context.Context, in *ReadPointsOfPanoramaRequest, opts ...grpc.CallOption) (*ReadPointsOfPanoramaResponse, error)
	CreateTransition(ctx context.Context, in *CreateTransitionRequest, opts ...grpc.CallOption) (*CreateTransitionResponse, error)
	UpdateTransition(ctx context.Context, in *UpdateTransitionRequest, opts ...grpc.CallOption) (*UpdateTransitionResponse, error)
	DeleteTransition(ctx context.Context, in *DeleteTransitionRequest, opts ...grpc.CallOption) (*DeleteTransitionResponse, error)
	ReadTransitionsOfPanorama(ctx context.Context, in *ReadTransitionsOfPanoramaRequest, opts ...grpc.CallOption) (*ReadTransitionsOfPanoramaResponse, error)
}

type tablesClient struct {
	cc grpc.ClientConnInterface
}

func NewTablesClient(cc grpc.ClientConnInterface) TablesClient {
	return &tablesClient{cc}
}

func (c *tablesClient) CreateTable(ctx context.Context, in *CreateTableRequest, opts ...grpc.CallOption) (*CreateTableResponse, error) {
	out := new(CreateTableResponse)
	err := c.cc.Invoke(ctx, "/grpc.Tables/CreateTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tablesClient) UpdateTable(ctx context.Context, in *UpdateTableRequest, opts ...grpc.CallOption) (*UpdateTableResponse, error) {
	out := new(UpdateTableResponse)
	err := c.cc.Invoke(ctx, "/grpc.Tables/UpdateTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tablesClient) DeleteTable(ctx context.Context, in *DeleteTableRequest, opts ...grpc.CallOption) (*DeleteTableResponse, error) {
	out := new(DeleteTableResponse)
	err := c.cc.Invoke(ctx, "/grpc.Tables/DeleteTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tablesClient) ReadTablesOfRoom(ctx context.Context, in *ReadTablesOfRoomRequest, opts ...grpc.CallOption) (*ReadTablesOfRoomResponse, error) {
	out := new(ReadTablesOfRoomResponse)
	err := c.cc.Invoke(ctx, "/grpc.Tables/ReadTablesOfRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tablesClient) CreatePanorama(ctx context.Context, in *CreatePanoramaRequest, opts ...grpc.CallOption) (*CreatePanoramaResponse, error) {
	out := new(CreatePanoramaResponse)
	err := c.cc.Invoke(ctx, "/grpc.Tables/CreatePanorama", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tablesClient) UpdatePanorama(ctx context.Context, in *UpdatePanoramaRequest, opts ...grpc.CallOption) (*UpdatePanoramaResponse, error) {
	out := new(UpdatePanoramaResponse)
	err := c.cc.Invoke(ctx, "/grpc.Tables/UpdatePanorama", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tablesClient) DeletePanorama(ctx context.Context, in *DeletePanoramaRequest, opts ...grpc.CallOption) (*DeletePanoramaResponse, error) {
	out := new(DeletePanoramaResponse)
	err := c.cc.Invoke(ctx, "/grpc.Tables/DeletePanorama", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tablesClient) ReadPanoramasOfRoom(ctx context.Context, in *ReadPanoramasOfRoomRequest, opts ...grpc.CallOption) (*ReadPanoramasOfRoomResponse, error) {
	out := new(ReadPanoramasOfRoomResponse)
	err := c.cc.Invoke(ctx, "/grpc.Tables/ReadPanoramasOfRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tablesClient) CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*CreateRoomResponse, error) {
	out := new(CreateRoomResponse)
	err := c.cc.Invoke(ctx, "/grpc.Tables/CreateRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tablesClient) UpdateRoom(ctx context.Context, in *UpdateRoomRequest, opts ...grpc.CallOption) (*UpdateRoomResponse, error) {
	out := new(UpdateRoomResponse)
	err := c.cc.Invoke(ctx, "/grpc.Tables/UpdateRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tablesClient) DeleteRoom(ctx context.Context, in *DeleteRoomRequest, opts ...grpc.CallOption) (*DeleteRoomResponse, error) {
	out := new(DeleteRoomResponse)
	err := c.cc.Invoke(ctx, "/grpc.Tables/DeleteRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tablesClient) ReadRoomsById(ctx context.Context, in *ReadRoomsByIdRequest, opts ...grpc.CallOption) (*ReadRoomsByIdResponse, error) {
	out := new(ReadRoomsByIdResponse)
	err := c.cc.Invoke(ctx, "/grpc.Tables/ReadRoomsById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tablesClient) ReadRoomsOfProject(ctx context.Context, in *ReadRoomsOfProjectRequest, opts ...grpc.CallOption) (*ReadRoomsOfProjectResponse, error) {
	out := new(ReadRoomsOfProjectResponse)
	err := c.cc.Invoke(ctx, "/grpc.Tables/ReadRoomsOfProject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tablesClient) CreatePoint(ctx context.Context, in *CreatePointRequest, opts ...grpc.CallOption) (*CreatePointResponse, error) {
	out := new(CreatePointResponse)
	err := c.cc.Invoke(ctx, "/grpc.Tables/CreatePoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tablesClient) UpdatePoint(ctx context.Context, in *UpdatePointRequest, opts ...grpc.CallOption) (*UpdatePointResponse, error) {
	out := new(UpdatePointResponse)
	err := c.cc.Invoke(ctx, "/grpc.Tables/UpdatePoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tablesClient) DeletePoint(ctx context.Context, in *DeletePointRequest, opts ...grpc.CallOption) (*DeletePointResponse, error) {
	out := new(DeletePointResponse)
	err := c.cc.Invoke(ctx, "/grpc.Tables/DeletePoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tablesClient) ReadPointsOfPanorama(ctx context.Context, in *ReadPointsOfPanoramaRequest, opts ...grpc.CallOption) (*ReadPointsOfPanoramaResponse, error) {
	out := new(ReadPointsOfPanoramaResponse)
	err := c.cc.Invoke(ctx, "/grpc.Tables/ReadPointsOfPanorama", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tablesClient) CreateTransition(ctx context.Context, in *CreateTransitionRequest, opts ...grpc.CallOption) (*CreateTransitionResponse, error) {
	out := new(CreateTransitionResponse)
	err := c.cc.Invoke(ctx, "/grpc.Tables/CreateTransition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tablesClient) UpdateTransition(ctx context.Context, in *UpdateTransitionRequest, opts ...grpc.CallOption) (*UpdateTransitionResponse, error) {
	out := new(UpdateTransitionResponse)
	err := c.cc.Invoke(ctx, "/grpc.Tables/UpdateTransition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tablesClient) DeleteTransition(ctx context.Context, in *DeleteTransitionRequest, opts ...grpc.CallOption) (*DeleteTransitionResponse, error) {
	out := new(DeleteTransitionResponse)
	err := c.cc.Invoke(ctx, "/grpc.Tables/DeleteTransition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tablesClient) ReadTransitionsOfPanorama(ctx context.Context, in *ReadTransitionsOfPanoramaRequest, opts ...grpc.CallOption) (*ReadTransitionsOfPanoramaResponse, error) {
	out := new(ReadTransitionsOfPanoramaResponse)
	err := c.cc.Invoke(ctx, "/grpc.Tables/ReadTransitionsOfPanorama", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TablesServer is the server API for Tables service.
// All implementations must embed UnimplementedTablesServer
// for forward compatibility
type TablesServer interface {
	CreateTable(context.Context, *CreateTableRequest) (*CreateTableResponse, error)
	UpdateTable(context.Context, *UpdateTableRequest) (*UpdateTableResponse, error)
	DeleteTable(context.Context, *DeleteTableRequest) (*DeleteTableResponse, error)
	ReadTablesOfRoom(context.Context, *ReadTablesOfRoomRequest) (*ReadTablesOfRoomResponse, error)
	CreatePanorama(context.Context, *CreatePanoramaRequest) (*CreatePanoramaResponse, error)
	UpdatePanorama(context.Context, *UpdatePanoramaRequest) (*UpdatePanoramaResponse, error)
	DeletePanorama(context.Context, *DeletePanoramaRequest) (*DeletePanoramaResponse, error)
	ReadPanoramasOfRoom(context.Context, *ReadPanoramasOfRoomRequest) (*ReadPanoramasOfRoomResponse, error)
	CreateRoom(context.Context, *CreateRoomRequest) (*CreateRoomResponse, error)
	UpdateRoom(context.Context, *UpdateRoomRequest) (*UpdateRoomResponse, error)
	DeleteRoom(context.Context, *DeleteRoomRequest) (*DeleteRoomResponse, error)
	ReadRoomsById(context.Context, *ReadRoomsByIdRequest) (*ReadRoomsByIdResponse, error)
	ReadRoomsOfProject(context.Context, *ReadRoomsOfProjectRequest) (*ReadRoomsOfProjectResponse, error)
	CreatePoint(context.Context, *CreatePointRequest) (*CreatePointResponse, error)
	UpdatePoint(context.Context, *UpdatePointRequest) (*UpdatePointResponse, error)
	DeletePoint(context.Context, *DeletePointRequest) (*DeletePointResponse, error)
	ReadPointsOfPanorama(context.Context, *ReadPointsOfPanoramaRequest) (*ReadPointsOfPanoramaResponse, error)
	CreateTransition(context.Context, *CreateTransitionRequest) (*CreateTransitionResponse, error)
	UpdateTransition(context.Context, *UpdateTransitionRequest) (*UpdateTransitionResponse, error)
	DeleteTransition(context.Context, *DeleteTransitionRequest) (*DeleteTransitionResponse, error)
	ReadTransitionsOfPanorama(context.Context, *ReadTransitionsOfPanoramaRequest) (*ReadTransitionsOfPanoramaResponse, error)
	mustEmbedUnimplementedTablesServer()
}

// UnimplementedTablesServer must be embedded to have forward compatible implementations.
type UnimplementedTablesServer struct {
}

func (UnimplementedTablesServer) CreateTable(context.Context, *CreateTableRequest) (*CreateTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTable not implemented")
}
func (UnimplementedTablesServer) UpdateTable(context.Context, *UpdateTableRequest) (*UpdateTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTable not implemented")
}
func (UnimplementedTablesServer) DeleteTable(context.Context, *DeleteTableRequest) (*DeleteTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTable not implemented")
}
func (UnimplementedTablesServer) ReadTablesOfRoom(context.Context, *ReadTablesOfRoomRequest) (*ReadTablesOfRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadTablesOfRoom not implemented")
}
func (UnimplementedTablesServer) CreatePanorama(context.Context, *CreatePanoramaRequest) (*CreatePanoramaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePanorama not implemented")
}
func (UnimplementedTablesServer) UpdatePanorama(context.Context, *UpdatePanoramaRequest) (*UpdatePanoramaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePanorama not implemented")
}
func (UnimplementedTablesServer) DeletePanorama(context.Context, *DeletePanoramaRequest) (*DeletePanoramaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePanorama not implemented")
}
func (UnimplementedTablesServer) ReadPanoramasOfRoom(context.Context, *ReadPanoramasOfRoomRequest) (*ReadPanoramasOfRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadPanoramasOfRoom not implemented")
}
func (UnimplementedTablesServer) CreateRoom(context.Context, *CreateRoomRequest) (*CreateRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoom not implemented")
}
func (UnimplementedTablesServer) UpdateRoom(context.Context, *UpdateRoomRequest) (*UpdateRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRoom not implemented")
}
func (UnimplementedTablesServer) DeleteRoom(context.Context, *DeleteRoomRequest) (*DeleteRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRoom not implemented")
}
func (UnimplementedTablesServer) ReadRoomsById(context.Context, *ReadRoomsByIdRequest) (*ReadRoomsByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadRoomsById not implemented")
}
func (UnimplementedTablesServer) ReadRoomsOfProject(context.Context, *ReadRoomsOfProjectRequest) (*ReadRoomsOfProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadRoomsOfProject not implemented")
}
func (UnimplementedTablesServer) CreatePoint(context.Context, *CreatePointRequest) (*CreatePointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePoint not implemented")
}
func (UnimplementedTablesServer) UpdatePoint(context.Context, *UpdatePointRequest) (*UpdatePointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePoint not implemented")
}
func (UnimplementedTablesServer) DeletePoint(context.Context, *DeletePointRequest) (*DeletePointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePoint not implemented")
}
func (UnimplementedTablesServer) ReadPointsOfPanorama(context.Context, *ReadPointsOfPanoramaRequest) (*ReadPointsOfPanoramaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadPointsOfPanorama not implemented")
}
func (UnimplementedTablesServer) CreateTransition(context.Context, *CreateTransitionRequest) (*CreateTransitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTransition not implemented")
}
func (UnimplementedTablesServer) UpdateTransition(context.Context, *UpdateTransitionRequest) (*UpdateTransitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTransition not implemented")
}
func (UnimplementedTablesServer) DeleteTransition(context.Context, *DeleteTransitionRequest) (*DeleteTransitionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTransition not implemented")
}
func (UnimplementedTablesServer) ReadTransitionsOfPanorama(context.Context, *ReadTransitionsOfPanoramaRequest) (*ReadTransitionsOfPanoramaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadTransitionsOfPanorama not implemented")
}
func (UnimplementedTablesServer) mustEmbedUnimplementedTablesServer() {}

// UnsafeTablesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TablesServer will
// result in compilation errors.
type UnsafeTablesServer interface {
	mustEmbedUnimplementedTablesServer()
}

func RegisterTablesServer(s grpc.ServiceRegistrar, srv TablesServer) {
	s.RegisterService(&Tables_ServiceDesc, srv)
}

func _Tables_CreateTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TablesServer).CreateTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Tables/CreateTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TablesServer).CreateTable(ctx, req.(*CreateTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tables_UpdateTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TablesServer).UpdateTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Tables/UpdateTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TablesServer).UpdateTable(ctx, req.(*UpdateTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tables_DeleteTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TablesServer).DeleteTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Tables/DeleteTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TablesServer).DeleteTable(ctx, req.(*DeleteTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tables_ReadTablesOfRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadTablesOfRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TablesServer).ReadTablesOfRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Tables/ReadTablesOfRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TablesServer).ReadTablesOfRoom(ctx, req.(*ReadTablesOfRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tables_CreatePanorama_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePanoramaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TablesServer).CreatePanorama(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Tables/CreatePanorama",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TablesServer).CreatePanorama(ctx, req.(*CreatePanoramaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tables_UpdatePanorama_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePanoramaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TablesServer).UpdatePanorama(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Tables/UpdatePanorama",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TablesServer).UpdatePanorama(ctx, req.(*UpdatePanoramaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tables_DeletePanorama_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePanoramaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TablesServer).DeletePanorama(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Tables/DeletePanorama",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TablesServer).DeletePanorama(ctx, req.(*DeletePanoramaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tables_ReadPanoramasOfRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadPanoramasOfRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TablesServer).ReadPanoramasOfRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Tables/ReadPanoramasOfRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TablesServer).ReadPanoramasOfRoom(ctx, req.(*ReadPanoramasOfRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tables_CreateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TablesServer).CreateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Tables/CreateRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TablesServer).CreateRoom(ctx, req.(*CreateRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tables_UpdateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TablesServer).UpdateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Tables/UpdateRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TablesServer).UpdateRoom(ctx, req.(*UpdateRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tables_DeleteRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TablesServer).DeleteRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Tables/DeleteRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TablesServer).DeleteRoom(ctx, req.(*DeleteRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tables_ReadRoomsById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRoomsByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TablesServer).ReadRoomsById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Tables/ReadRoomsById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TablesServer).ReadRoomsById(ctx, req.(*ReadRoomsByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tables_ReadRoomsOfProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadRoomsOfProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TablesServer).ReadRoomsOfProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Tables/ReadRoomsOfProject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TablesServer).ReadRoomsOfProject(ctx, req.(*ReadRoomsOfProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tables_CreatePoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TablesServer).CreatePoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Tables/CreatePoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TablesServer).CreatePoint(ctx, req.(*CreatePointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tables_UpdatePoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TablesServer).UpdatePoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Tables/UpdatePoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TablesServer).UpdatePoint(ctx, req.(*UpdatePointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tables_DeletePoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TablesServer).DeletePoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Tables/DeletePoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TablesServer).DeletePoint(ctx, req.(*DeletePointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tables_ReadPointsOfPanorama_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadPointsOfPanoramaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TablesServer).ReadPointsOfPanorama(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Tables/ReadPointsOfPanorama",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TablesServer).ReadPointsOfPanorama(ctx, req.(*ReadPointsOfPanoramaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tables_CreateTransition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TablesServer).CreateTransition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Tables/CreateTransition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TablesServer).CreateTransition(ctx, req.(*CreateTransitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tables_UpdateTransition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTransitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TablesServer).UpdateTransition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Tables/UpdateTransition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TablesServer).UpdateTransition(ctx, req.(*UpdateTransitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tables_DeleteTransition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTransitionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TablesServer).DeleteTransition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Tables/DeleteTransition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TablesServer).DeleteTransition(ctx, req.(*DeleteTransitionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tables_ReadTransitionsOfPanorama_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadTransitionsOfPanoramaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TablesServer).ReadTransitionsOfPanorama(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Tables/ReadTransitionsOfPanorama",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TablesServer).ReadTransitionsOfPanorama(ctx, req.(*ReadTransitionsOfPanoramaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Tables_ServiceDesc is the grpc.ServiceDesc for Tables service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tables_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Tables",
	HandlerType: (*TablesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTable",
			Handler:    _Tables_CreateTable_Handler,
		},
		{
			MethodName: "UpdateTable",
			Handler:    _Tables_UpdateTable_Handler,
		},
		{
			MethodName: "DeleteTable",
			Handler:    _Tables_DeleteTable_Handler,
		},
		{
			MethodName: "ReadTablesOfRoom",
			Handler:    _Tables_ReadTablesOfRoom_Handler,
		},
		{
			MethodName: "CreatePanorama",
			Handler:    _Tables_CreatePanorama_Handler,
		},
		{
			MethodName: "UpdatePanorama",
			Handler:    _Tables_UpdatePanorama_Handler,
		},
		{
			MethodName: "DeletePanorama",
			Handler:    _Tables_DeletePanorama_Handler,
		},
		{
			MethodName: "ReadPanoramasOfRoom",
			Handler:    _Tables_ReadPanoramasOfRoom_Handler,
		},
		{
			MethodName: "CreateRoom",
			Handler:    _Tables_CreateRoom_Handler,
		},
		{
			MethodName: "UpdateRoom",
			Handler:    _Tables_UpdateRoom_Handler,
		},
		{
			MethodName: "DeleteRoom",
			Handler:    _Tables_DeleteRoom_Handler,
		},
		{
			MethodName: "ReadRoomsById",
			Handler:    _Tables_ReadRoomsById_Handler,
		},
		{
			MethodName: "ReadRoomsOfProject",
			Handler:    _Tables_ReadRoomsOfProject_Handler,
		},
		{
			MethodName: "CreatePoint",
			Handler:    _Tables_CreatePoint_Handler,
		},
		{
			MethodName: "UpdatePoint",
			Handler:    _Tables_UpdatePoint_Handler,
		},
		{
			MethodName: "DeletePoint",
			Handler:    _Tables_DeletePoint_Handler,
		},
		{
			MethodName: "ReadPointsOfPanorama",
			Handler:    _Tables_ReadPointsOfPanorama_Handler,
		},
		{
			MethodName: "CreateTransition",
			Handler:    _Tables_CreateTransition_Handler,
		},
		{
			MethodName: "UpdateTransition",
			Handler:    _Tables_UpdateTransition_Handler,
		},
		{
			MethodName: "DeleteTransition",
			Handler:    _Tables_DeleteTransition_Handler,
		},
		{
			MethodName: "ReadTransitionsOfPanorama",
			Handler:    _Tables_ReadTransitionsOfPanorama_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/table.proto",
}
