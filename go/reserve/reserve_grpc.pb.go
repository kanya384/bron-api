// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: protos/reserve.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReservesClient is the client API for Reserves service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReservesClient interface {
	CreateReserve(ctx context.Context, in *CreateReserveRequest, opts ...grpc.CallOption) (*CreateReserveResponse, error)
	UpdateReserve(ctx context.Context, in *UpdateReserveRequest, opts ...grpc.CallOption) (*UpdateReserveResponse, error)
	DeleteReserve(ctx context.Context, in *DeleteReserveRequest, opts ...grpc.CallOption) (*DeleteReserveResponse, error)
	ReadReservesOfGuest(ctx context.Context, in *ReadReservesOfGuestRequest, opts ...grpc.CallOption) (*ReadReservesOfGuestResponse, error)
}

type reservesClient struct {
	cc grpc.ClientConnInterface
}

func NewReservesClient(cc grpc.ClientConnInterface) ReservesClient {
	return &reservesClient{cc}
}

func (c *reservesClient) CreateReserve(ctx context.Context, in *CreateReserveRequest, opts ...grpc.CallOption) (*CreateReserveResponse, error) {
	out := new(CreateReserveResponse)
	err := c.cc.Invoke(ctx, "/grpc.Reserves/CreateReserve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservesClient) UpdateReserve(ctx context.Context, in *UpdateReserveRequest, opts ...grpc.CallOption) (*UpdateReserveResponse, error) {
	out := new(UpdateReserveResponse)
	err := c.cc.Invoke(ctx, "/grpc.Reserves/UpdateReserve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservesClient) DeleteReserve(ctx context.Context, in *DeleteReserveRequest, opts ...grpc.CallOption) (*DeleteReserveResponse, error) {
	out := new(DeleteReserveResponse)
	err := c.cc.Invoke(ctx, "/grpc.Reserves/DeleteReserve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reservesClient) ReadReservesOfGuest(ctx context.Context, in *ReadReservesOfGuestRequest, opts ...grpc.CallOption) (*ReadReservesOfGuestResponse, error) {
	out := new(ReadReservesOfGuestResponse)
	err := c.cc.Invoke(ctx, "/grpc.Reserves/ReadReservesOfGuest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReservesServer is the server API for Reserves service.
// All implementations must embed UnimplementedReservesServer
// for forward compatibility
type ReservesServer interface {
	CreateReserve(context.Context, *CreateReserveRequest) (*CreateReserveResponse, error)
	UpdateReserve(context.Context, *UpdateReserveRequest) (*UpdateReserveResponse, error)
	DeleteReserve(context.Context, *DeleteReserveRequest) (*DeleteReserveResponse, error)
	ReadReservesOfGuest(context.Context, *ReadReservesOfGuestRequest) (*ReadReservesOfGuestResponse, error)
	mustEmbedUnimplementedReservesServer()
}

// UnimplementedReservesServer must be embedded to have forward compatible implementations.
type UnimplementedReservesServer struct {
}

func (UnimplementedReservesServer) CreateReserve(context.Context, *CreateReserveRequest) (*CreateReserveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateReserve not implemented")
}
func (UnimplementedReservesServer) UpdateReserve(context.Context, *UpdateReserveRequest) (*UpdateReserveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateReserve not implemented")
}
func (UnimplementedReservesServer) DeleteReserve(context.Context, *DeleteReserveRequest) (*DeleteReserveResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteReserve not implemented")
}
func (UnimplementedReservesServer) ReadReservesOfGuest(context.Context, *ReadReservesOfGuestRequest) (*ReadReservesOfGuestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadReservesOfGuest not implemented")
}
func (UnimplementedReservesServer) mustEmbedUnimplementedReservesServer() {}

// UnsafeReservesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReservesServer will
// result in compilation errors.
type UnsafeReservesServer interface {
	mustEmbedUnimplementedReservesServer()
}

func RegisterReservesServer(s grpc.ServiceRegistrar, srv ReservesServer) {
	s.RegisterService(&Reserves_ServiceDesc, srv)
}

func _Reserves_CreateReserve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateReserveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservesServer).CreateReserve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Reserves/CreateReserve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservesServer).CreateReserve(ctx, req.(*CreateReserveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reserves_UpdateReserve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReserveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservesServer).UpdateReserve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Reserves/UpdateReserve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservesServer).UpdateReserve(ctx, req.(*UpdateReserveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reserves_DeleteReserve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReserveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservesServer).DeleteReserve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Reserves/DeleteReserve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservesServer).DeleteReserve(ctx, req.(*DeleteReserveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Reserves_ReadReservesOfGuest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadReservesOfGuestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReservesServer).ReadReservesOfGuest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Reserves/ReadReservesOfGuest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReservesServer).ReadReservesOfGuest(ctx, req.(*ReadReservesOfGuestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Reserves_ServiceDesc is the grpc.ServiceDesc for Reserves service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Reserves_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Reserves",
	HandlerType: (*ReservesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateReserve",
			Handler:    _Reserves_CreateReserve_Handler,
		},
		{
			MethodName: "UpdateReserve",
			Handler:    _Reserves_UpdateReserve_Handler,
		},
		{
			MethodName: "DeleteReserve",
			Handler:    _Reserves_DeleteReserve_Handler,
		},
		{
			MethodName: "ReadReservesOfGuest",
			Handler:    _Reserves_ReadReservesOfGuest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/reserve.proto",
}
