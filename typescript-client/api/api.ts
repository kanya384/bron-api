/* tslint:disable */
/* eslint-disable */
/**
 * Auth service gateway
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Contact: kanya384@mail.ru
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface GrpcCategoryResponse
 */
export interface GrpcCategoryResponse {
    /**
     * 
     * @type {string}
     * @memberof GrpcCategoryResponse
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcCategoryResponse
     */
    'projectId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcCategoryResponse
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcCategoryResponse
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcCategoryResponse
     */
    'modifiedAt'?: string;
}
/**
 * 
 * @export
 * @interface GrpcCompanyResponse
 */
export interface GrpcCompanyResponse {
    /**
     * 
     * @type {string}
     * @memberof GrpcCompanyResponse
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcCompanyResponse
     */
    'userId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcCompanyResponse
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof GrpcCompanyResponse
     */
    'inn'?: number;
    /**
     * 
     * @type {string}
     * @memberof GrpcCompanyResponse
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcCompanyResponse
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcCompanyResponse
     */
    'modifiedAt'?: string;
}
/**
 * 
 * @export
 * @interface GrpcCreateCategoryRequest
 */
export interface GrpcCreateCategoryRequest {
    /**
     * 
     * @type {string}
     * @memberof GrpcCreateCategoryRequest
     */
    'projectId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcCreateCategoryRequest
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface GrpcCreateCategoryResponse
 */
export interface GrpcCreateCategoryResponse {
    /**
     * 
     * @type {GrpcCategoryResponse}
     * @memberof GrpcCreateCategoryResponse
     */
    'response'?: GrpcCategoryResponse;
}
/**
 * 
 * @export
 * @interface GrpcCreateCompanyAndProjectRequest
 */
export interface GrpcCreateCompanyAndProjectRequest {
    /**
     * 
     * @type {GrpcCreateCompanyRequest}
     * @memberof GrpcCreateCompanyAndProjectRequest
     */
    'company'?: GrpcCreateCompanyRequest;
    /**
     * 
     * @type {GrpcCreateProjectRequest}
     * @memberof GrpcCreateCompanyAndProjectRequest
     */
    'project'?: GrpcCreateProjectRequest;
}
/**
 * 
 * @export
 * @interface GrpcCreateCompanyAndProjectResponse
 */
export interface GrpcCreateCompanyAndProjectResponse {
    /**
     * 
     * @type {GrpcCompanyResponse}
     * @memberof GrpcCreateCompanyAndProjectResponse
     */
    'company'?: GrpcCompanyResponse;
    /**
     * 
     * @type {GrpcProjectResponse}
     * @memberof GrpcCreateCompanyAndProjectResponse
     */
    'project'?: GrpcProjectResponse;
}
/**
 * 
 * @export
 * @interface GrpcCreateCompanyRequest
 */
export interface GrpcCreateCompanyRequest {
    /**
     * 
     * @type {string}
     * @memberof GrpcCreateCompanyRequest
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof GrpcCreateCompanyRequest
     */
    'inn'?: number;
    /**
     * 
     * @type {string}
     * @memberof GrpcCreateCompanyRequest
     */
    'address'?: string;
}
/**
 * 
 * @export
 * @interface GrpcCreateCompanyResponse
 */
export interface GrpcCreateCompanyResponse {
    /**
     * 
     * @type {GrpcCompanyResponse}
     * @memberof GrpcCreateCompanyResponse
     */
    'response'?: GrpcCompanyResponse;
}
/**
 * 
 * @export
 * @interface GrpcCreatePanoramaRequest
 */
export interface GrpcCreatePanoramaRequest {
    /**
     * 
     * @type {string}
     * @memberof GrpcCreatePanoramaRequest
     */
    'roomId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GrpcCreatePanoramaRequest
     */
    'main'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof GrpcCreatePanoramaRequest
     */
    'photo'?: string;
}
/**
 * 
 * @export
 * @interface GrpcCreatePanoramaResponse
 */
export interface GrpcCreatePanoramaResponse {
    /**
     * 
     * @type {GrpcPanoramaResponse}
     * @memberof GrpcCreatePanoramaResponse
     */
    'response'?: GrpcPanoramaResponse;
}
/**
 * 
 * @export
 * @interface GrpcCreatePointRequest
 */
export interface GrpcCreatePointRequest {
    /**
     * 
     * @type {string}
     * @memberof GrpcCreatePointRequest
     */
    'tableId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcCreatePointRequest
     */
    'panoramaId'?: string;
    /**
     * 
     * @type {number}
     * @memberof GrpcCreatePointRequest
     */
    'x'?: number;
    /**
     * 
     * @type {number}
     * @memberof GrpcCreatePointRequest
     */
    'y'?: number;
    /**
     * 
     * @type {number}
     * @memberof GrpcCreatePointRequest
     */
    'z'?: number;
}
/**
 * 
 * @export
 * @interface GrpcCreatePointResponse
 */
export interface GrpcCreatePointResponse {
    /**
     * 
     * @type {GrpcPointResponse}
     * @memberof GrpcCreatePointResponse
     */
    'response'?: GrpcPointResponse;
}
/**
 * 
 * @export
 * @interface GrpcCreateProductRequest
 */
export interface GrpcCreateProductRequest {
    /**
     * 
     * @type {string}
     * @memberof GrpcCreateProductRequest
     */
    'categoryId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcCreateProductRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcCreateProductRequest
     */
    'summary'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcCreateProductRequest
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcCreateProductRequest
     */
    'image'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcCreateProductRequest
     */
    'badge'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcCreateProductRequest
     */
    'status'?: string;
    /**
     * 
     * @type {number}
     * @memberof GrpcCreateProductRequest
     */
    'price'?: number;
}
/**
 * 
 * @export
 * @interface GrpcCreateProductResponse
 */
export interface GrpcCreateProductResponse {
    /**
     * 
     * @type {GrpcProductResponse}
     * @memberof GrpcCreateProductResponse
     */
    'response'?: GrpcProductResponse;
}
/**
 * 
 * @export
 * @interface GrpcCreateProjectRequest
 */
export interface GrpcCreateProjectRequest {
    /**
     * 
     * @type {string}
     * @memberof GrpcCreateProjectRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcCreateProjectRequest
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcCreateProjectRequest
     */
    'address'?: string;
    /**
     * 
     * @type {number}
     * @memberof GrpcCreateProjectRequest
     */
    'longitude'?: number;
    /**
     * 
     * @type {number}
     * @memberof GrpcCreateProjectRequest
     */
    'latitiude'?: number;
    /**
     * 
     * @type {string}
     * @memberof GrpcCreateProjectRequest
     */
    'photo'?: string;
}
/**
 * 
 * @export
 * @interface GrpcCreateProjectResponse
 */
export interface GrpcCreateProjectResponse {
    /**
     * 
     * @type {GrpcProjectResponse}
     * @memberof GrpcCreateProjectResponse
     */
    'response'?: GrpcProjectResponse;
}
/**
 * 
 * @export
 * @interface GrpcCreateReserveRequest
 */
export interface GrpcCreateReserveRequest {
    /**
     * 
     * @type {string}
     * @memberof GrpcCreateReserveRequest
     */
    'tableId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcCreateReserveRequest
     */
    'tableName'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcCreateReserveRequest
     */
    'tablePhoto'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcCreateReserveRequest
     */
    'projectId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcCreateReserveRequest
     */
    'projectName'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcCreateReserveRequest
     */
    'guestId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcCreateReserveRequest
     */
    'guestName'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcCreateReserveRequest
     */
    'guestPhone'?: string;
    /**
     * 
     * @type {number}
     * @memberof GrpcCreateReserveRequest
     */
    'personsCount'?: number;
    /**
     * 
     * @type {string}
     * @memberof GrpcCreateReserveRequest
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcCreateReserveRequest
     */
    'startTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcCreateReserveRequest
     */
    'endTime'?: string;
}
/**
 * 
 * @export
 * @interface GrpcCreateReserveResponse
 */
export interface GrpcCreateReserveResponse {
    /**
     * 
     * @type {GrpcReserveResponse}
     * @memberof GrpcCreateReserveResponse
     */
    'response'?: GrpcReserveResponse;
}
/**
 * 
 * @export
 * @interface GrpcCreateRoomRequest
 */
export interface GrpcCreateRoomRequest {
    /**
     * 
     * @type {string}
     * @memberof GrpcCreateRoomRequest
     */
    'projectId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcCreateRoomRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcCreateRoomRequest
     */
    'description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GrpcCreateRoomRequest
     */
    'active'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof GrpcCreateRoomRequest
     */
    'photo'?: string;
}
/**
 * 
 * @export
 * @interface GrpcCreateRoomResponse
 */
export interface GrpcCreateRoomResponse {
    /**
     * 
     * @type {GrpcRoomResponse}
     * @memberof GrpcCreateRoomResponse
     */
    'response'?: GrpcRoomResponse;
}
/**
 * 
 * @export
 * @interface GrpcCreateTableRequest
 */
export interface GrpcCreateTableRequest {
    /**
     * 
     * @type {string}
     * @memberof GrpcCreateTableRequest
     */
    'roomId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcCreateTableRequest
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof GrpcCreateTableRequest
     */
    'personsCount'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof GrpcCreateTableRequest
     */
    'active'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GrpcCreateTableRequest
     */
    'gameConsole'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GrpcCreateTableRequest
     */
    'window'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GrpcCreateTableRequest
     */
    'karaoke'?: boolean;
}
/**
 * 
 * @export
 * @interface GrpcCreateTableResponse
 */
export interface GrpcCreateTableResponse {
    /**
     * 
     * @type {GrpcTableResponse}
     * @memberof GrpcCreateTableResponse
     */
    'response'?: GrpcTableResponse;
}
/**
 * 
 * @export
 * @interface GrpcCreateTransitionRequest
 */
export interface GrpcCreateTransitionRequest {
    /**
     * 
     * @type {string}
     * @memberof GrpcCreateTransitionRequest
     */
    'panoramaId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcCreateTransitionRequest
     */
    'transitionPanoramaId'?: string;
    /**
     * 
     * @type {number}
     * @memberof GrpcCreateTransitionRequest
     */
    'x'?: number;
    /**
     * 
     * @type {number}
     * @memberof GrpcCreateTransitionRequest
     */
    'y'?: number;
    /**
     * 
     * @type {number}
     * @memberof GrpcCreateTransitionRequest
     */
    'z'?: number;
}
/**
 * 
 * @export
 * @interface GrpcCreateTransitionResponse
 */
export interface GrpcCreateTransitionResponse {
    /**
     * 
     * @type {GrpcTransitionResponse}
     * @memberof GrpcCreateTransitionResponse
     */
    'response'?: GrpcTransitionResponse;
}
/**
 * 
 * @export
 * @interface GrpcDeleteCategoryResponse
 */
export interface GrpcDeleteCategoryResponse {
    /**
     * 
     * @type {boolean}
     * @memberof GrpcDeleteCategoryResponse
     */
    'success'?: boolean;
}
/**
 * 
 * @export
 * @interface GrpcDeleteCompanyResponse
 */
export interface GrpcDeleteCompanyResponse {
    /**
     * 
     * @type {boolean}
     * @memberof GrpcDeleteCompanyResponse
     */
    'success'?: boolean;
}
/**
 * 
 * @export
 * @interface GrpcDeletePanoramaResponse
 */
export interface GrpcDeletePanoramaResponse {
    /**
     * 
     * @type {boolean}
     * @memberof GrpcDeletePanoramaResponse
     */
    'success'?: boolean;
}
/**
 * 
 * @export
 * @interface GrpcDeletePointResponse
 */
export interface GrpcDeletePointResponse {
    /**
     * 
     * @type {boolean}
     * @memberof GrpcDeletePointResponse
     */
    'success'?: boolean;
}
/**
 * 
 * @export
 * @interface GrpcDeleteProductResponse
 */
export interface GrpcDeleteProductResponse {
    /**
     * 
     * @type {boolean}
     * @memberof GrpcDeleteProductResponse
     */
    'success'?: boolean;
}
/**
 * 
 * @export
 * @interface GrpcDeleteProjectResponse
 */
export interface GrpcDeleteProjectResponse {
    /**
     * 
     * @type {boolean}
     * @memberof GrpcDeleteProjectResponse
     */
    'success'?: boolean;
}
/**
 * 
 * @export
 * @interface GrpcDeleteReserveResponse
 */
export interface GrpcDeleteReserveResponse {
    /**
     * 
     * @type {boolean}
     * @memberof GrpcDeleteReserveResponse
     */
    'success'?: boolean;
}
/**
 * 
 * @export
 * @interface GrpcDeleteRoomResponse
 */
export interface GrpcDeleteRoomResponse {
    /**
     * 
     * @type {boolean}
     * @memberof GrpcDeleteRoomResponse
     */
    'success'?: boolean;
}
/**
 * 
 * @export
 * @interface GrpcDeleteTableResponse
 */
export interface GrpcDeleteTableResponse {
    /**
     * 
     * @type {boolean}
     * @memberof GrpcDeleteTableResponse
     */
    'success'?: boolean;
}
/**
 * 
 * @export
 * @interface GrpcDeleteTransitionResponse
 */
export interface GrpcDeleteTransitionResponse {
    /**
     * 
     * @type {boolean}
     * @memberof GrpcDeleteTransitionResponse
     */
    'success'?: boolean;
}
/**
 * 
 * @export
 * @interface GrpcDeviceRequest
 */
export interface GrpcDeviceRequest {
    /**
     * 
     * @type {string}
     * @memberof GrpcDeviceRequest
     */
    'userID'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcDeviceRequest
     */
    'deviceID'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcDeviceRequest
     */
    'ip'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcDeviceRequest
     */
    'agent'?: string;
    /**
     * 
     * @type {number}
     * @memberof GrpcDeviceRequest
     */
    'dtype'?: number;
}
/**
 * 
 * @export
 * @interface GrpcPanoramaResponse
 */
export interface GrpcPanoramaResponse {
    /**
     * 
     * @type {string}
     * @memberof GrpcPanoramaResponse
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcPanoramaResponse
     */
    'roomId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GrpcPanoramaResponse
     */
    'main'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof GrpcPanoramaResponse
     */
    'photo'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcPanoramaResponse
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcPanoramaResponse
     */
    'modifiedAt'?: string;
}
/**
 * 
 * @export
 * @interface GrpcPointResponse
 */
export interface GrpcPointResponse {
    /**
     * 
     * @type {string}
     * @memberof GrpcPointResponse
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcPointResponse
     */
    'tableId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcPointResponse
     */
    'panoramaId'?: string;
    /**
     * 
     * @type {number}
     * @memberof GrpcPointResponse
     */
    'x'?: number;
    /**
     * 
     * @type {number}
     * @memberof GrpcPointResponse
     */
    'y'?: number;
    /**
     * 
     * @type {number}
     * @memberof GrpcPointResponse
     */
    'z'?: number;
    /**
     * 
     * @type {string}
     * @memberof GrpcPointResponse
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcPointResponse
     */
    'modifiedAt'?: string;
}
/**
 * 
 * @export
 * @interface GrpcProductResponse
 */
export interface GrpcProductResponse {
    /**
     * 
     * @type {string}
     * @memberof GrpcProductResponse
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcProductResponse
     */
    'categoryId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcProductResponse
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcProductResponse
     */
    'summary'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcProductResponse
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcProductResponse
     */
    'image'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcProductResponse
     */
    'badge'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcProductResponse
     */
    'status'?: string;
    /**
     * 
     * @type {number}
     * @memberof GrpcProductResponse
     */
    'price'?: number;
    /**
     * 
     * @type {number}
     * @memberof GrpcProductResponse
     */
    'rating'?: number;
    /**
     * 
     * @type {number}
     * @memberof GrpcProductResponse
     */
    'ratingCount'?: number;
    /**
     * 
     * @type {string}
     * @memberof GrpcProductResponse
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcProductResponse
     */
    'modifiedAt'?: string;
}
/**
 * 
 * @export
 * @interface GrpcProjectResponse
 */
export interface GrpcProjectResponse {
    /**
     * 
     * @type {string}
     * @memberof GrpcProjectResponse
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcProjectResponse
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcProjectResponse
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcProjectResponse
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcProjectResponse
     */
    'photo'?: string;
    /**
     * 
     * @type {number}
     * @memberof GrpcProjectResponse
     */
    'longitude'?: number;
    /**
     * 
     * @type {number}
     * @memberof GrpcProjectResponse
     */
    'latitiude'?: number;
    /**
     * 
     * @type {string}
     * @memberof GrpcProjectResponse
     */
    'companyId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcProjectResponse
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcProjectResponse
     */
    'modifiedAt'?: string;
}
/**
 * 
 * @export
 * @interface GrpcReadCategoriesByProjectIdResponse
 */
export interface GrpcReadCategoriesByProjectIdResponse {
    /**
     * 
     * @type {Array<GrpcCategoryResponse>}
     * @memberof GrpcReadCategoriesByProjectIdResponse
     */
    'response'?: Array<GrpcCategoryResponse>;
}
/**
 * 
 * @export
 * @interface GrpcReadCompanyByIdResponse
 */
export interface GrpcReadCompanyByIdResponse {
    /**
     * 
     * @type {GrpcCompanyResponse}
     * @memberof GrpcReadCompanyByIdResponse
     */
    'response'?: GrpcCompanyResponse;
}
/**
 * 
 * @export
 * @interface GrpcReadCompanyOfUserResponse
 */
export interface GrpcReadCompanyOfUserResponse {
    /**
     * 
     * @type {GrpcCompanyResponse}
     * @memberof GrpcReadCompanyOfUserResponse
     */
    'response'?: GrpcCompanyResponse;
}
/**
 * 
 * @export
 * @interface GrpcReadPanoramasOfRoomResponse
 */
export interface GrpcReadPanoramasOfRoomResponse {
    /**
     * 
     * @type {Array<GrpcPanoramaResponse>}
     * @memberof GrpcReadPanoramasOfRoomResponse
     */
    'response'?: Array<GrpcPanoramaResponse>;
}
/**
 * 
 * @export
 * @interface GrpcReadPointsOfPanoramaResponse
 */
export interface GrpcReadPointsOfPanoramaResponse {
    /**
     * 
     * @type {Array<GrpcPointResponse>}
     * @memberof GrpcReadPointsOfPanoramaResponse
     */
    'response'?: Array<GrpcPointResponse>;
}
/**
 * 
 * @export
 * @interface GrpcReadProductsOfCategoryResponse
 */
export interface GrpcReadProductsOfCategoryResponse {
    /**
     * 
     * @type {Array<GrpcProductResponse>}
     * @memberof GrpcReadProductsOfCategoryResponse
     */
    'response'?: Array<GrpcProductResponse>;
}
/**
 * 
 * @export
 * @interface GrpcReadProjectsOfUserResponse
 */
export interface GrpcReadProjectsOfUserResponse {
    /**
     * 
     * @type {Array<GrpcProjectResponse>}
     * @memberof GrpcReadProjectsOfUserResponse
     */
    'projects'?: Array<GrpcProjectResponse>;
}
/**
 * 
 * @export
 * @interface GrpcReadReservesOfGuestResponse
 */
export interface GrpcReadReservesOfGuestResponse {
    /**
     * 
     * @type {Array<GrpcReserveResponse>}
     * @memberof GrpcReadReservesOfGuestResponse
     */
    'response'?: Array<GrpcReserveResponse>;
}
/**
 * 
 * @export
 * @interface GrpcReadRoomsByIdResponse
 */
export interface GrpcReadRoomsByIdResponse {
    /**
     * 
     * @type {GrpcRoomResponse}
     * @memberof GrpcReadRoomsByIdResponse
     */
    'response'?: GrpcRoomResponse;
}
/**
 * 
 * @export
 * @interface GrpcReadRoomsOfProjectResponse
 */
export interface GrpcReadRoomsOfProjectResponse {
    /**
     * 
     * @type {Array<GrpcRoomResponse>}
     * @memberof GrpcReadRoomsOfProjectResponse
     */
    'response'?: Array<GrpcRoomResponse>;
}
/**
 * 
 * @export
 * @interface GrpcReadTablesOfRoomResponse
 */
export interface GrpcReadTablesOfRoomResponse {
    /**
     * 
     * @type {Array<GrpcTableResponse>}
     * @memberof GrpcReadTablesOfRoomResponse
     */
    'response'?: Array<GrpcTableResponse>;
}
/**
 * 
 * @export
 * @interface GrpcReadTransitionsOfPanoramaResponse
 */
export interface GrpcReadTransitionsOfPanoramaResponse {
    /**
     * 
     * @type {Array<GrpcTransitionResponse>}
     * @memberof GrpcReadTransitionsOfPanoramaResponse
     */
    'response'?: Array<GrpcTransitionResponse>;
}
/**
 * 
 * @export
 * @interface GrpcRefreshTokenRequest
 */
export interface GrpcRefreshTokenRequest {
    /**
     * 
     * @type {string}
     * @memberof GrpcRefreshTokenRequest
     */
    'refreshToken'?: string;
}
/**
 * 
 * @export
 * @interface GrpcRefreshTokenResponse
 */
export interface GrpcRefreshTokenResponse {
    /**
     * 
     * @type {string}
     * @memberof GrpcRefreshTokenResponse
     */
    'accessToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcRefreshTokenResponse
     */
    'refreshToken'?: string;
}
/**
 * 
 * @export
 * @interface GrpcReserveResponse
 */
export interface GrpcReserveResponse {
    /**
     * 
     * @type {string}
     * @memberof GrpcReserveResponse
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcReserveResponse
     */
    'tableId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcReserveResponse
     */
    'tableName'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcReserveResponse
     */
    'tablePhoto'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcReserveResponse
     */
    'projectId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcReserveResponse
     */
    'projectName'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcReserveResponse
     */
    'guestId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcReserveResponse
     */
    'guestName'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcReserveResponse
     */
    'guestPhone'?: string;
    /**
     * 
     * @type {number}
     * @memberof GrpcReserveResponse
     */
    'personsCount'?: number;
    /**
     * 
     * @type {string}
     * @memberof GrpcReserveResponse
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcReserveResponse
     */
    'startTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcReserveResponse
     */
    'endTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcReserveResponse
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcReserveResponse
     */
    'modifiedAt'?: string;
}
/**
 * 
 * @export
 * @interface GrpcRoomResponse
 */
export interface GrpcRoomResponse {
    /**
     * 
     * @type {string}
     * @memberof GrpcRoomResponse
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcRoomResponse
     */
    'projectId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcRoomResponse
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcRoomResponse
     */
    'description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GrpcRoomResponse
     */
    'active'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof GrpcRoomResponse
     */
    'photo'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcRoomResponse
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcRoomResponse
     */
    'modifiedAt'?: string;
}
/**
 * 
 * @export
 * @interface GrpcSignInRequest
 */
export interface GrpcSignInRequest {
    /**
     * 
     * @type {string}
     * @memberof GrpcSignInRequest
     */
    'phone'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcSignInRequest
     */
    'pass'?: string;
    /**
     * 
     * @type {GrpcDeviceRequest}
     * @memberof GrpcSignInRequest
     */
    'device'?: GrpcDeviceRequest;
}
/**
 * 
 * @export
 * @interface GrpcSignInResponse
 */
export interface GrpcSignInResponse {
    /**
     * 
     * @type {string}
     * @memberof GrpcSignInResponse
     */
    'token'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcSignInResponse
     */
    'refreshToken'?: string;
}
/**
 * Intentionaly complicated message type to cover many features of Protobuf.
 * @export
 * @interface GrpcSignUpRequest
 */
export interface GrpcSignUpRequest {
    /**
     * 
     * @type {string}
     * @memberof GrpcSignUpRequest
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof GrpcSignUpRequest
     */
    'surname': string;
    /**
     * 
     * @type {string}
     * @memberof GrpcSignUpRequest
     */
    'phone': string;
    /**
     * 
     * @type {string}
     * @memberof GrpcSignUpRequest
     */
    'pass': string;
    /**
     * 
     * @type {string}
     * @memberof GrpcSignUpRequest
     */
    'email': string;
}
/**
 * 
 * @export
 * @interface GrpcSignUpResponse
 */
export interface GrpcSignUpResponse {
    /**
     * 
     * @type {string}
     * @memberof GrpcSignUpResponse
     */
    'message'?: string;
}
/**
 * 
 * @export
 * @interface GrpcTableResponse
 */
export interface GrpcTableResponse {
    /**
     * 
     * @type {string}
     * @memberof GrpcTableResponse
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcTableResponse
     */
    'roomId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcTableResponse
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof GrpcTableResponse
     */
    'personsCount'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof GrpcTableResponse
     */
    'active'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GrpcTableResponse
     */
    'gameConsole'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GrpcTableResponse
     */
    'window'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GrpcTableResponse
     */
    'karaoke'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof GrpcTableResponse
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcTableResponse
     */
    'modifiedAt'?: string;
}
/**
 * 
 * @export
 * @interface GrpcTransitionResponse
 */
export interface GrpcTransitionResponse {
    /**
     * 
     * @type {string}
     * @memberof GrpcTransitionResponse
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcTransitionResponse
     */
    'panoramaId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcTransitionResponse
     */
    'transitionPanoramaId'?: string;
    /**
     * 
     * @type {number}
     * @memberof GrpcTransitionResponse
     */
    'x'?: number;
    /**
     * 
     * @type {number}
     * @memberof GrpcTransitionResponse
     */
    'y'?: number;
    /**
     * 
     * @type {number}
     * @memberof GrpcTransitionResponse
     */
    'z'?: number;
    /**
     * 
     * @type {string}
     * @memberof GrpcTransitionResponse
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcTransitionResponse
     */
    'modifiedAt'?: string;
}
/**
 * 
 * @export
 * @interface GrpcUpdateCategoryRequest
 */
export interface GrpcUpdateCategoryRequest {
    /**
     * 
     * @type {string}
     * @memberof GrpcUpdateCategoryRequest
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcUpdateCategoryRequest
     */
    'name'?: string;
}
/**
 * 
 * @export
 * @interface GrpcUpdateCategoryResponse
 */
export interface GrpcUpdateCategoryResponse {
    /**
     * 
     * @type {GrpcCategoryResponse}
     * @memberof GrpcUpdateCategoryResponse
     */
    'response'?: GrpcCategoryResponse;
}
/**
 * 
 * @export
 * @interface GrpcUpdateCompanyRequest
 */
export interface GrpcUpdateCompanyRequest {
    /**
     * 
     * @type {string}
     * @memberof GrpcUpdateCompanyRequest
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcUpdateCompanyRequest
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof GrpcUpdateCompanyRequest
     */
    'inn'?: number;
    /**
     * 
     * @type {string}
     * @memberof GrpcUpdateCompanyRequest
     */
    'address'?: string;
}
/**
 * 
 * @export
 * @interface GrpcUpdateCompanyResponse
 */
export interface GrpcUpdateCompanyResponse {
    /**
     * 
     * @type {GrpcCompanyResponse}
     * @memberof GrpcUpdateCompanyResponse
     */
    'response'?: GrpcCompanyResponse;
}
/**
 * 
 * @export
 * @interface GrpcUpdatePanoramaRequest
 */
export interface GrpcUpdatePanoramaRequest {
    /**
     * 
     * @type {string}
     * @memberof GrpcUpdatePanoramaRequest
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcUpdatePanoramaRequest
     */
    'roomId'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GrpcUpdatePanoramaRequest
     */
    'main'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof GrpcUpdatePanoramaRequest
     */
    'photo'?: string;
}
/**
 * 
 * @export
 * @interface GrpcUpdatePanoramaResponse
 */
export interface GrpcUpdatePanoramaResponse {
    /**
     * 
     * @type {GrpcPanoramaResponse}
     * @memberof GrpcUpdatePanoramaResponse
     */
    'response'?: GrpcPanoramaResponse;
}
/**
 * 
 * @export
 * @interface GrpcUpdatePointRequest
 */
export interface GrpcUpdatePointRequest {
    /**
     * 
     * @type {string}
     * @memberof GrpcUpdatePointRequest
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcUpdatePointRequest
     */
    'tableId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcUpdatePointRequest
     */
    'panoramaId'?: string;
    /**
     * 
     * @type {number}
     * @memberof GrpcUpdatePointRequest
     */
    'x'?: number;
    /**
     * 
     * @type {number}
     * @memberof GrpcUpdatePointRequest
     */
    'y'?: number;
    /**
     * 
     * @type {number}
     * @memberof GrpcUpdatePointRequest
     */
    'z'?: number;
}
/**
 * 
 * @export
 * @interface GrpcUpdatePointResponse
 */
export interface GrpcUpdatePointResponse {
    /**
     * 
     * @type {GrpcPointResponse}
     * @memberof GrpcUpdatePointResponse
     */
    'response'?: GrpcPointResponse;
}
/**
 * 
 * @export
 * @interface GrpcUpdateProductRequest
 */
export interface GrpcUpdateProductRequest {
    /**
     * 
     * @type {string}
     * @memberof GrpcUpdateProductRequest
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcUpdateProductRequest
     */
    'categoryId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcUpdateProductRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcUpdateProductRequest
     */
    'summary'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcUpdateProductRequest
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcUpdateProductRequest
     */
    'image'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcUpdateProductRequest
     */
    'badge'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcUpdateProductRequest
     */
    'status'?: string;
    /**
     * 
     * @type {number}
     * @memberof GrpcUpdateProductRequest
     */
    'price'?: number;
}
/**
 * 
 * @export
 * @interface GrpcUpdateProductResponse
 */
export interface GrpcUpdateProductResponse {
    /**
     * 
     * @type {GrpcProductResponse}
     * @memberof GrpcUpdateProductResponse
     */
    'response'?: GrpcProductResponse;
}
/**
 * 
 * @export
 * @interface GrpcUpdateProjectRequest
 */
export interface GrpcUpdateProjectRequest {
    /**
     * 
     * @type {string}
     * @memberof GrpcUpdateProjectRequest
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcUpdateProjectRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcUpdateProjectRequest
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcUpdateProjectRequest
     */
    'address'?: string;
    /**
     * 
     * @type {number}
     * @memberof GrpcUpdateProjectRequest
     */
    'longitude'?: number;
    /**
     * 
     * @type {number}
     * @memberof GrpcUpdateProjectRequest
     */
    'latitiude'?: number;
    /**
     * 
     * @type {string}
     * @memberof GrpcUpdateProjectRequest
     */
    'photo'?: string;
}
/**
 * 
 * @export
 * @interface GrpcUpdateProjectResponse
 */
export interface GrpcUpdateProjectResponse {
    /**
     * 
     * @type {GrpcProjectResponse}
     * @memberof GrpcUpdateProjectResponse
     */
    'response'?: GrpcProjectResponse;
}
/**
 * 
 * @export
 * @interface GrpcUpdateReserveRequest
 */
export interface GrpcUpdateReserveRequest {
    /**
     * 
     * @type {string}
     * @memberof GrpcUpdateReserveRequest
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcUpdateReserveRequest
     */
    'tableId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcUpdateReserveRequest
     */
    'tableName'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcUpdateReserveRequest
     */
    'tablePhoto'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcUpdateReserveRequest
     */
    'projectId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcUpdateReserveRequest
     */
    'projectName'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcUpdateReserveRequest
     */
    'guestId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcUpdateReserveRequest
     */
    'guestName'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcUpdateReserveRequest
     */
    'guestPhone'?: string;
    /**
     * 
     * @type {number}
     * @memberof GrpcUpdateReserveRequest
     */
    'personsCount'?: number;
    /**
     * 
     * @type {string}
     * @memberof GrpcUpdateReserveRequest
     */
    'status'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcUpdateReserveRequest
     */
    'startTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcUpdateReserveRequest
     */
    'endTime'?: string;
}
/**
 * 
 * @export
 * @interface GrpcUpdateReserveResponse
 */
export interface GrpcUpdateReserveResponse {
    /**
     * 
     * @type {GrpcReserveResponse}
     * @memberof GrpcUpdateReserveResponse
     */
    'response'?: GrpcReserveResponse;
}
/**
 * 
 * @export
 * @interface GrpcUpdateRoomRequest
 */
export interface GrpcUpdateRoomRequest {
    /**
     * 
     * @type {string}
     * @memberof GrpcUpdateRoomRequest
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcUpdateRoomRequest
     */
    'projectId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcUpdateRoomRequest
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcUpdateRoomRequest
     */
    'description'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof GrpcUpdateRoomRequest
     */
    'active'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof GrpcUpdateRoomRequest
     */
    'photo'?: string;
}
/**
 * 
 * @export
 * @interface GrpcUpdateRoomResponse
 */
export interface GrpcUpdateRoomResponse {
    /**
     * 
     * @type {GrpcRoomResponse}
     * @memberof GrpcUpdateRoomResponse
     */
    'response'?: GrpcRoomResponse;
}
/**
 * 
 * @export
 * @interface GrpcUpdateTableRequest
 */
export interface GrpcUpdateTableRequest {
    /**
     * 
     * @type {string}
     * @memberof GrpcUpdateTableRequest
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcUpdateTableRequest
     */
    'roomId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcUpdateTableRequest
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof GrpcUpdateTableRequest
     */
    'personsCount'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof GrpcUpdateTableRequest
     */
    'active'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GrpcUpdateTableRequest
     */
    'gameConsole'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GrpcUpdateTableRequest
     */
    'window'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof GrpcUpdateTableRequest
     */
    'karaoke'?: boolean;
}
/**
 * 
 * @export
 * @interface GrpcUpdateTableResponse
 */
export interface GrpcUpdateTableResponse {
    /**
     * 
     * @type {GrpcTableResponse}
     * @memberof GrpcUpdateTableResponse
     */
    'response'?: GrpcTableResponse;
}
/**
 * 
 * @export
 * @interface GrpcUpdateTransitionRequest
 */
export interface GrpcUpdateTransitionRequest {
    /**
     * 
     * @type {string}
     * @memberof GrpcUpdateTransitionRequest
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcUpdateTransitionRequest
     */
    'panoramaId'?: string;
    /**
     * 
     * @type {string}
     * @memberof GrpcUpdateTransitionRequest
     */
    'transitionPanoramaId'?: string;
    /**
     * 
     * @type {number}
     * @memberof GrpcUpdateTransitionRequest
     */
    'x'?: number;
    /**
     * 
     * @type {number}
     * @memberof GrpcUpdateTransitionRequest
     */
    'y'?: number;
    /**
     * 
     * @type {number}
     * @memberof GrpcUpdateTransitionRequest
     */
    'z'?: number;
}
/**
 * 
 * @export
 * @interface GrpcUpdateTransitionResponse
 */
export interface GrpcUpdateTransitionResponse {
    /**
     * 
     * @type {GrpcTransitionResponse}
     * @memberof GrpcUpdateTransitionResponse
     */
    'response'?: GrpcTransitionResponse;
}
/**
 * 
 * @export
 * @interface GrpcVerifyEmailRequest
 */
export interface GrpcVerifyEmailRequest {
    /**
     * 
     * @type {string}
     * @memberof GrpcVerifyEmailRequest
     */
    'verificationCode'?: string;
}
/**
 * 
 * @export
 * @interface ProtobufAny
 */
export interface ProtobufAny {
    [key: string]: object | any;

    /**
     * 
     * @type {string}
     * @memberof ProtobufAny
     */
    '@type'?: string;
}
/**
 * 
 * @export
 * @interface RpcStatus
 */
export interface RpcStatus {
    /**
     * 
     * @type {number}
     * @memberof RpcStatus
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof RpcStatus
     */
    'message'?: string;
    /**
     * 
     * @type {Array<ProtobufAny>}
     * @memberof RpcStatus
     */
    'details'?: Array<ProtobufAny>;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {GrpcRefreshTokenRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRefreshToken: async (body: GrpcRefreshTokenRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('authRefreshToken', 'body', body)
            const localVarPath = `/api/auth/refresh-token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authResetPassword: async (body: object, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('authResetPassword', 'body', body)
            const localVarPath = `/api/auth/reset-password`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GrpcSignInRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authSignIn: async (body: GrpcSignInRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('authSignIn', 'body', body)
            const localVarPath = `/api/auth/sign-in`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GrpcSignUpRequest} body Intentionaly complicated message type to cover many features of Protobuf.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authSignUpAdministrator: async (body: GrpcSignUpRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('authSignUpAdministrator', 'body', body)
            const localVarPath = `/api/auth/sign-up/administrator`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GrpcSignUpRequest} body Intentionaly complicated message type to cover many features of Protobuf.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authSignUpUser: async (body: GrpcSignUpRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('authSignUpUser', 'body', body)
            const localVarPath = `/api/auth/sign-up/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GrpcVerifyEmailRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authVerifyEmail: async (body: GrpcVerifyEmailRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('authVerifyEmail', 'body', body)
            const localVarPath = `/api/auth/verify-mail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {GrpcRefreshTokenRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authRefreshToken(body: GrpcRefreshTokenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GrpcRefreshTokenResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authRefreshToken(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authResetPassword(body: object, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authResetPassword(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {GrpcSignInRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authSignIn(body: GrpcSignInRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GrpcSignInResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authSignIn(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {GrpcSignUpRequest} body Intentionaly complicated message type to cover many features of Protobuf.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authSignUpAdministrator(body: GrpcSignUpRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GrpcSignUpResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authSignUpAdministrator(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {GrpcSignUpRequest} body Intentionaly complicated message type to cover many features of Protobuf.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authSignUpUser(body: GrpcSignUpRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GrpcSignUpResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authSignUpUser(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {GrpcVerifyEmailRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authVerifyEmail(body: GrpcVerifyEmailRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authVerifyEmail(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @param {GrpcRefreshTokenRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authRefreshToken(body: GrpcRefreshTokenRequest, options?: any): AxiosPromise<GrpcRefreshTokenResponse> {
            return localVarFp.authRefreshToken(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {object} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authResetPassword(body: object, options?: any): AxiosPromise<object> {
            return localVarFp.authResetPassword(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GrpcSignInRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authSignIn(body: GrpcSignInRequest, options?: any): AxiosPromise<GrpcSignInResponse> {
            return localVarFp.authSignIn(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GrpcSignUpRequest} body Intentionaly complicated message type to cover many features of Protobuf.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authSignUpAdministrator(body: GrpcSignUpRequest, options?: any): AxiosPromise<GrpcSignUpResponse> {
            return localVarFp.authSignUpAdministrator(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GrpcSignUpRequest} body Intentionaly complicated message type to cover many features of Protobuf.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authSignUpUser(body: GrpcSignUpRequest, options?: any): AxiosPromise<GrpcSignUpResponse> {
            return localVarFp.authSignUpUser(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GrpcVerifyEmailRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authVerifyEmail(body: GrpcVerifyEmailRequest, options?: any): AxiosPromise<object> {
            return localVarFp.authVerifyEmail(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @param {GrpcRefreshTokenRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authRefreshToken(body: GrpcRefreshTokenRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authRefreshToken(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {object} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authResetPassword(body: object, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authResetPassword(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GrpcSignInRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authSignIn(body: GrpcSignInRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authSignIn(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GrpcSignUpRequest} body Intentionaly complicated message type to cover many features of Protobuf.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authSignUpAdministrator(body: GrpcSignUpRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authSignUpAdministrator(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GrpcSignUpRequest} body Intentionaly complicated message type to cover many features of Protobuf.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authSignUpUser(body: GrpcSignUpRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authSignUpUser(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GrpcVerifyEmailRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authVerifyEmail(body: GrpcVerifyEmailRequest, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).authVerifyEmail(body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CatalogApi - axios parameter creator
 * @export
 */
export const CatalogApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {GrpcCreateCategoryRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogCreateCategory: async (body: GrpcCreateCategoryRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('catalogCreateCategory', 'body', body)
            const localVarPath = `/api/category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GrpcCreateProductRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogCreateProduct: async (body: GrpcCreateProductRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('catalogCreateProduct', 'body', body)
            const localVarPath = `/product`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogDeleteCategory: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('catalogDeleteCategory', 'id', id)
            const localVarPath = `/api/category/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogDeleteProduct: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('catalogDeleteProduct', 'id', id)
            const localVarPath = `/product/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogReadCategoriesByProjectId: async (projectId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('catalogReadCategoriesByProjectId', 'projectId', projectId)
            const localVarPath = `/api/category/{projectId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogReadProductsOfCategory: async (productId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            assertParamExists('catalogReadProductsOfCategory', 'productId', productId)
            const localVarPath = `/api/category/{productId}`
                .replace(`{${"productId"}}`, encodeURIComponent(String(productId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GrpcUpdateCategoryRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogUpdateCategory: async (body: GrpcUpdateCategoryRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('catalogUpdateCategory', 'body', body)
            const localVarPath = `/api/category`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GrpcUpdateProductRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogUpdateProduct: async (body: GrpcUpdateProductRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('catalogUpdateProduct', 'body', body)
            const localVarPath = `/product`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CatalogApi - functional programming interface
 * @export
 */
export const CatalogApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CatalogApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {GrpcCreateCategoryRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogCreateCategory(body: GrpcCreateCategoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GrpcCreateCategoryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogCreateCategory(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {GrpcCreateProductRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogCreateProduct(body: GrpcCreateProductRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GrpcCreateProductResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogCreateProduct(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogDeleteCategory(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GrpcDeleteCategoryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogDeleteCategory(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogDeleteProduct(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GrpcDeleteProductResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogDeleteProduct(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogReadCategoriesByProjectId(projectId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GrpcReadCategoriesByProjectIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogReadCategoriesByProjectId(projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogReadProductsOfCategory(productId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GrpcReadProductsOfCategoryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogReadProductsOfCategory(productId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {GrpcUpdateCategoryRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogUpdateCategory(body: GrpcUpdateCategoryRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GrpcUpdateCategoryResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogUpdateCategory(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {GrpcUpdateProductRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async catalogUpdateProduct(body: GrpcUpdateProductRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GrpcUpdateProductResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.catalogUpdateProduct(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CatalogApi - factory interface
 * @export
 */
export const CatalogApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CatalogApiFp(configuration)
    return {
        /**
         * 
         * @param {GrpcCreateCategoryRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogCreateCategory(body: GrpcCreateCategoryRequest, options?: any): AxiosPromise<GrpcCreateCategoryResponse> {
            return localVarFp.catalogCreateCategory(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GrpcCreateProductRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogCreateProduct(body: GrpcCreateProductRequest, options?: any): AxiosPromise<GrpcCreateProductResponse> {
            return localVarFp.catalogCreateProduct(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogDeleteCategory(id: string, options?: any): AxiosPromise<GrpcDeleteCategoryResponse> {
            return localVarFp.catalogDeleteCategory(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogDeleteProduct(id: string, options?: any): AxiosPromise<GrpcDeleteProductResponse> {
            return localVarFp.catalogDeleteProduct(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogReadCategoriesByProjectId(projectId: string, options?: any): AxiosPromise<GrpcReadCategoriesByProjectIdResponse> {
            return localVarFp.catalogReadCategoriesByProjectId(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} productId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogReadProductsOfCategory(productId: string, options?: any): AxiosPromise<GrpcReadProductsOfCategoryResponse> {
            return localVarFp.catalogReadProductsOfCategory(productId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GrpcUpdateCategoryRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogUpdateCategory(body: GrpcUpdateCategoryRequest, options?: any): AxiosPromise<GrpcUpdateCategoryResponse> {
            return localVarFp.catalogUpdateCategory(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GrpcUpdateProductRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        catalogUpdateProduct(body: GrpcUpdateProductRequest, options?: any): AxiosPromise<GrpcUpdateProductResponse> {
            return localVarFp.catalogUpdateProduct(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CatalogApi - object-oriented interface
 * @export
 * @class CatalogApi
 * @extends {BaseAPI}
 */
export class CatalogApi extends BaseAPI {
    /**
     * 
     * @param {GrpcCreateCategoryRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    public catalogCreateCategory(body: GrpcCreateCategoryRequest, options?: AxiosRequestConfig) {
        return CatalogApiFp(this.configuration).catalogCreateCategory(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GrpcCreateProductRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    public catalogCreateProduct(body: GrpcCreateProductRequest, options?: AxiosRequestConfig) {
        return CatalogApiFp(this.configuration).catalogCreateProduct(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    public catalogDeleteCategory(id: string, options?: AxiosRequestConfig) {
        return CatalogApiFp(this.configuration).catalogDeleteCategory(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    public catalogDeleteProduct(id: string, options?: AxiosRequestConfig) {
        return CatalogApiFp(this.configuration).catalogDeleteProduct(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} projectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    public catalogReadCategoriesByProjectId(projectId: string, options?: AxiosRequestConfig) {
        return CatalogApiFp(this.configuration).catalogReadCategoriesByProjectId(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} productId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    public catalogReadProductsOfCategory(productId: string, options?: AxiosRequestConfig) {
        return CatalogApiFp(this.configuration).catalogReadProductsOfCategory(productId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GrpcUpdateCategoryRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    public catalogUpdateCategory(body: GrpcUpdateCategoryRequest, options?: AxiosRequestConfig) {
        return CatalogApiFp(this.configuration).catalogUpdateCategory(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GrpcUpdateProductRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    public catalogUpdateProduct(body: GrpcUpdateProductRequest, options?: AxiosRequestConfig) {
        return CatalogApiFp(this.configuration).catalogUpdateProduct(body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CompanyApi - axios parameter creator
 * @export
 */
export const CompanyApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {GrpcCreateCompanyRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyCreateCompany: async (body: GrpcCreateCompanyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('companyCreateCompany', 'body', body)
            const localVarPath = `/api/company`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GrpcCreateCompanyAndProjectRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyCreateCompanyAndProject: async (body: GrpcCreateCompanyAndProjectRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('companyCreateCompanyAndProject', 'body', body)
            const localVarPath = `/api/company/project`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GrpcCreateProjectRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyCreateProject: async (body: GrpcCreateProjectRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('companyCreateProject', 'body', body)
            const localVarPath = `/api/project`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyDeleteCompany: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('companyDeleteCompany', 'id', id)
            const localVarPath = `/api/company/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyDeleteProject: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('companyDeleteProject', 'id', id)
            const localVarPath = `/api/project/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyReadCompanyByID: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('companyReadCompanyByID', 'id', id)
            const localVarPath = `/api/company/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyReadCompanyOfuser: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/company`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyReadProjectsOfUser: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/project`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GrpcUpdateCompanyRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyUpdateCompany: async (body: GrpcUpdateCompanyRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('companyUpdateCompany', 'body', body)
            const localVarPath = `/api/company`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GrpcUpdateProjectRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyUpdateProject: async (body: GrpcUpdateProjectRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('companyUpdateProject', 'body', body)
            const localVarPath = `/api/project`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CompanyApi - functional programming interface
 * @export
 */
export const CompanyApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CompanyApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {GrpcCreateCompanyRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyCreateCompany(body: GrpcCreateCompanyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GrpcCreateCompanyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyCreateCompany(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {GrpcCreateCompanyAndProjectRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyCreateCompanyAndProject(body: GrpcCreateCompanyAndProjectRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GrpcCreateCompanyAndProjectResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyCreateCompanyAndProject(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {GrpcCreateProjectRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyCreateProject(body: GrpcCreateProjectRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GrpcCreateProjectResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyCreateProject(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyDeleteCompany(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GrpcDeleteCompanyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyDeleteCompany(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyDeleteProject(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GrpcDeleteProjectResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyDeleteProject(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyReadCompanyByID(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GrpcReadCompanyByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyReadCompanyByID(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyReadCompanyOfuser(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GrpcReadCompanyOfUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyReadCompanyOfuser(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyReadProjectsOfUser(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GrpcReadProjectsOfUserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyReadProjectsOfUser(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {GrpcUpdateCompanyRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyUpdateCompany(body: GrpcUpdateCompanyRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GrpcUpdateCompanyResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyUpdateCompany(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {GrpcUpdateProjectRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async companyUpdateProject(body: GrpcUpdateProjectRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GrpcUpdateProjectResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.companyUpdateProject(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CompanyApi - factory interface
 * @export
 */
export const CompanyApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CompanyApiFp(configuration)
    return {
        /**
         * 
         * @param {GrpcCreateCompanyRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyCreateCompany(body: GrpcCreateCompanyRequest, options?: any): AxiosPromise<GrpcCreateCompanyResponse> {
            return localVarFp.companyCreateCompany(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GrpcCreateCompanyAndProjectRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyCreateCompanyAndProject(body: GrpcCreateCompanyAndProjectRequest, options?: any): AxiosPromise<GrpcCreateCompanyAndProjectResponse> {
            return localVarFp.companyCreateCompanyAndProject(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GrpcCreateProjectRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyCreateProject(body: GrpcCreateProjectRequest, options?: any): AxiosPromise<GrpcCreateProjectResponse> {
            return localVarFp.companyCreateProject(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyDeleteCompany(id: string, options?: any): AxiosPromise<GrpcDeleteCompanyResponse> {
            return localVarFp.companyDeleteCompany(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyDeleteProject(id: string, options?: any): AxiosPromise<GrpcDeleteProjectResponse> {
            return localVarFp.companyDeleteProject(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyReadCompanyByID(id: string, options?: any): AxiosPromise<GrpcReadCompanyByIdResponse> {
            return localVarFp.companyReadCompanyByID(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyReadCompanyOfuser(options?: any): AxiosPromise<GrpcReadCompanyOfUserResponse> {
            return localVarFp.companyReadCompanyOfuser(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyReadProjectsOfUser(options?: any): AxiosPromise<GrpcReadProjectsOfUserResponse> {
            return localVarFp.companyReadProjectsOfUser(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GrpcUpdateCompanyRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyUpdateCompany(body: GrpcUpdateCompanyRequest, options?: any): AxiosPromise<GrpcUpdateCompanyResponse> {
            return localVarFp.companyUpdateCompany(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GrpcUpdateProjectRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        companyUpdateProject(body: GrpcUpdateProjectRequest, options?: any): AxiosPromise<GrpcUpdateProjectResponse> {
            return localVarFp.companyUpdateProject(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CompanyApi - object-oriented interface
 * @export
 * @class CompanyApi
 * @extends {BaseAPI}
 */
export class CompanyApi extends BaseAPI {
    /**
     * 
     * @param {GrpcCreateCompanyRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public companyCreateCompany(body: GrpcCreateCompanyRequest, options?: AxiosRequestConfig) {
        return CompanyApiFp(this.configuration).companyCreateCompany(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GrpcCreateCompanyAndProjectRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public companyCreateCompanyAndProject(body: GrpcCreateCompanyAndProjectRequest, options?: AxiosRequestConfig) {
        return CompanyApiFp(this.configuration).companyCreateCompanyAndProject(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GrpcCreateProjectRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public companyCreateProject(body: GrpcCreateProjectRequest, options?: AxiosRequestConfig) {
        return CompanyApiFp(this.configuration).companyCreateProject(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public companyDeleteCompany(id: string, options?: AxiosRequestConfig) {
        return CompanyApiFp(this.configuration).companyDeleteCompany(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public companyDeleteProject(id: string, options?: AxiosRequestConfig) {
        return CompanyApiFp(this.configuration).companyDeleteProject(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public companyReadCompanyByID(id: string, options?: AxiosRequestConfig) {
        return CompanyApiFp(this.configuration).companyReadCompanyByID(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public companyReadCompanyOfuser(options?: AxiosRequestConfig) {
        return CompanyApiFp(this.configuration).companyReadCompanyOfuser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public companyReadProjectsOfUser(options?: AxiosRequestConfig) {
        return CompanyApiFp(this.configuration).companyReadProjectsOfUser(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GrpcUpdateCompanyRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public companyUpdateCompany(body: GrpcUpdateCompanyRequest, options?: AxiosRequestConfig) {
        return CompanyApiFp(this.configuration).companyUpdateCompany(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GrpcUpdateProjectRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CompanyApi
     */
    public companyUpdateProject(body: GrpcUpdateProjectRequest, options?: AxiosRequestConfig) {
        return CompanyApiFp(this.configuration).companyUpdateProject(body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ReservesApi - axios parameter creator
 * @export
 */
export const ReservesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {GrpcCreateReserveRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reservesCreateReserve: async (body: GrpcCreateReserveRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('reservesCreateReserve', 'body', body)
            const localVarPath = `/api/reserve`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reservesDeleteReserve: async (id?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/reserve`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} guestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reservesReadReservesOfGuest: async (guestId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'guestId' is not null or undefined
            assertParamExists('reservesReadReservesOfGuest', 'guestId', guestId)
            const localVarPath = `/api/reserve/{guestId}`
                .replace(`{${"guestId"}}`, encodeURIComponent(String(guestId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GrpcUpdateReserveRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reservesUpdateReserve: async (body: GrpcUpdateReserveRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('reservesUpdateReserve', 'body', body)
            const localVarPath = `/api/reserve`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReservesApi - functional programming interface
 * @export
 */
export const ReservesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReservesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {GrpcCreateReserveRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reservesCreateReserve(body: GrpcCreateReserveRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GrpcCreateReserveResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reservesCreateReserve(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reservesDeleteReserve(id?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GrpcDeleteReserveResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reservesDeleteReserve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} guestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reservesReadReservesOfGuest(guestId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GrpcReadReservesOfGuestResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reservesReadReservesOfGuest(guestId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {GrpcUpdateReserveRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async reservesUpdateReserve(body: GrpcUpdateReserveRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GrpcUpdateReserveResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.reservesUpdateReserve(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReservesApi - factory interface
 * @export
 */
export const ReservesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReservesApiFp(configuration)
    return {
        /**
         * 
         * @param {GrpcCreateReserveRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reservesCreateReserve(body: GrpcCreateReserveRequest, options?: any): AxiosPromise<GrpcCreateReserveResponse> {
            return localVarFp.reservesCreateReserve(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reservesDeleteReserve(id?: string, options?: any): AxiosPromise<GrpcDeleteReserveResponse> {
            return localVarFp.reservesDeleteReserve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} guestId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reservesReadReservesOfGuest(guestId: string, options?: any): AxiosPromise<GrpcReadReservesOfGuestResponse> {
            return localVarFp.reservesReadReservesOfGuest(guestId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GrpcUpdateReserveRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        reservesUpdateReserve(body: GrpcUpdateReserveRequest, options?: any): AxiosPromise<GrpcUpdateReserveResponse> {
            return localVarFp.reservesUpdateReserve(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReservesApi - object-oriented interface
 * @export
 * @class ReservesApi
 * @extends {BaseAPI}
 */
export class ReservesApi extends BaseAPI {
    /**
     * 
     * @param {GrpcCreateReserveRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservesApi
     */
    public reservesCreateReserve(body: GrpcCreateReserveRequest, options?: AxiosRequestConfig) {
        return ReservesApiFp(this.configuration).reservesCreateReserve(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservesApi
     */
    public reservesDeleteReserve(id?: string, options?: AxiosRequestConfig) {
        return ReservesApiFp(this.configuration).reservesDeleteReserve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} guestId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservesApi
     */
    public reservesReadReservesOfGuest(guestId: string, options?: AxiosRequestConfig) {
        return ReservesApiFp(this.configuration).reservesReadReservesOfGuest(guestId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GrpcUpdateReserveRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReservesApi
     */
    public reservesUpdateReserve(body: GrpcUpdateReserveRequest, options?: AxiosRequestConfig) {
        return ReservesApiFp(this.configuration).reservesUpdateReserve(body, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TablesApi - axios parameter creator
 * @export
 */
export const TablesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {GrpcCreatePanoramaRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesCreatePanorama: async (body: GrpcCreatePanoramaRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('tablesCreatePanorama', 'body', body)
            const localVarPath = `/api/panorama`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GrpcCreatePointRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesCreatePoint: async (body: GrpcCreatePointRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('tablesCreatePoint', 'body', body)
            const localVarPath = `/api/point`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GrpcCreateRoomRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesCreateRoom: async (body: GrpcCreateRoomRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('tablesCreateRoom', 'body', body)
            const localVarPath = `/api/room`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GrpcCreateTableRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesCreateTable: async (body: GrpcCreateTableRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('tablesCreateTable', 'body', body)
            const localVarPath = `/api/table`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GrpcCreateTransitionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesCreateTransition: async (body: GrpcCreateTransitionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('tablesCreateTransition', 'body', body)
            const localVarPath = `/api/transition`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesDeletePanorama: async (id?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/panorama`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesDeletePoint: async (id?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/point`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesDeleteRoom: async (id?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/room`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesDeleteTable: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tablesDeleteTable', 'id', id)
            const localVarPath = `/api/table/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesDeleteTransition: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('tablesDeleteTransition', 'id', id)
            const localVarPath = `/api/transition/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} roomId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesReadPanoramasOfRoom: async (roomId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            assertParamExists('tablesReadPanoramasOfRoom', 'roomId', roomId)
            const localVarPath = `/api/panorama/{roomId}`
                .replace(`{${"roomId"}}`, encodeURIComponent(String(roomId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} panoramaId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesReadPointsOfPanorama: async (panoramaId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'panoramaId' is not null or undefined
            assertParamExists('tablesReadPointsOfPanorama', 'panoramaId', panoramaId)
            const localVarPath = `/api/point/{panoramaId}`
                .replace(`{${"panoramaId"}}`, encodeURIComponent(String(panoramaId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} roomId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesReadRoomsById: async (roomId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            assertParamExists('tablesReadRoomsById', 'roomId', roomId)
            const localVarPath = `/api/room/{roomId}`
                .replace(`{${"roomId"}}`, encodeURIComponent(String(roomId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesReadRoomsOfProject: async (projectId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            assertParamExists('tablesReadRoomsOfProject', 'projectId', projectId)
            const localVarPath = `/api/room/{projectId}`
                .replace(`{${"projectId"}}`, encodeURIComponent(String(projectId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} roomId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesReadTablesOfRoom: async (roomId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'roomId' is not null or undefined
            assertParamExists('tablesReadTablesOfRoom', 'roomId', roomId)
            const localVarPath = `/api/table/{roomId}`
                .replace(`{${"roomId"}}`, encodeURIComponent(String(roomId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} panoramaId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesReadTransitionsOfPanorama: async (panoramaId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'panoramaId' is not null or undefined
            assertParamExists('tablesReadTransitionsOfPanorama', 'panoramaId', panoramaId)
            const localVarPath = `/api/transition/{panoramaId}`
                .replace(`{${"panoramaId"}}`, encodeURIComponent(String(panoramaId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GrpcUpdatePanoramaRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesUpdatePanorama: async (body: GrpcUpdatePanoramaRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('tablesUpdatePanorama', 'body', body)
            const localVarPath = `/api/panorama`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GrpcUpdatePointRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesUpdatePoint: async (body: GrpcUpdatePointRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('tablesUpdatePoint', 'body', body)
            const localVarPath = `/api/point`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GrpcUpdateRoomRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesUpdateRoom: async (body: GrpcUpdateRoomRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('tablesUpdateRoom', 'body', body)
            const localVarPath = `/api/room`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GrpcUpdateTableRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesUpdateTable: async (body: GrpcUpdateTableRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('tablesUpdateTable', 'body', body)
            const localVarPath = `/api/table`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GrpcUpdateTransitionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesUpdateTransition: async (body: GrpcUpdateTransitionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            assertParamExists('tablesUpdateTransition', 'body', body)
            const localVarPath = `/api/transition`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(body, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TablesApi - functional programming interface
 * @export
 */
export const TablesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TablesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {GrpcCreatePanoramaRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tablesCreatePanorama(body: GrpcCreatePanoramaRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GrpcCreatePanoramaResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tablesCreatePanorama(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {GrpcCreatePointRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tablesCreatePoint(body: GrpcCreatePointRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GrpcCreatePointResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tablesCreatePoint(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {GrpcCreateRoomRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tablesCreateRoom(body: GrpcCreateRoomRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GrpcCreateRoomResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tablesCreateRoom(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {GrpcCreateTableRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tablesCreateTable(body: GrpcCreateTableRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GrpcCreateTableResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tablesCreateTable(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {GrpcCreateTransitionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tablesCreateTransition(body: GrpcCreateTransitionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GrpcCreateTransitionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tablesCreateTransition(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tablesDeletePanorama(id?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GrpcDeletePanoramaResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tablesDeletePanorama(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tablesDeletePoint(id?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GrpcDeletePointResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tablesDeletePoint(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tablesDeleteRoom(id?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GrpcDeleteRoomResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tablesDeleteRoom(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tablesDeleteTable(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GrpcDeleteTableResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tablesDeleteTable(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tablesDeleteTransition(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GrpcDeleteTransitionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tablesDeleteTransition(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} roomId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tablesReadPanoramasOfRoom(roomId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GrpcReadPanoramasOfRoomResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tablesReadPanoramasOfRoom(roomId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} panoramaId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tablesReadPointsOfPanorama(panoramaId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GrpcReadPointsOfPanoramaResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tablesReadPointsOfPanorama(panoramaId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} roomId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tablesReadRoomsById(roomId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GrpcReadRoomsByIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tablesReadRoomsById(roomId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tablesReadRoomsOfProject(projectId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GrpcReadRoomsOfProjectResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tablesReadRoomsOfProject(projectId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} roomId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tablesReadTablesOfRoom(roomId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GrpcReadTablesOfRoomResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tablesReadTablesOfRoom(roomId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} panoramaId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tablesReadTransitionsOfPanorama(panoramaId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GrpcReadTransitionsOfPanoramaResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tablesReadTransitionsOfPanorama(panoramaId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {GrpcUpdatePanoramaRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tablesUpdatePanorama(body: GrpcUpdatePanoramaRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GrpcUpdatePanoramaResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tablesUpdatePanorama(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {GrpcUpdatePointRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tablesUpdatePoint(body: GrpcUpdatePointRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GrpcUpdatePointResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tablesUpdatePoint(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {GrpcUpdateRoomRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tablesUpdateRoom(body: GrpcUpdateRoomRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GrpcUpdateRoomResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tablesUpdateRoom(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {GrpcUpdateTableRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tablesUpdateTable(body: GrpcUpdateTableRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GrpcUpdateTableResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tablesUpdateTable(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {GrpcUpdateTransitionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tablesUpdateTransition(body: GrpcUpdateTransitionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GrpcUpdateTransitionResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tablesUpdateTransition(body, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TablesApi - factory interface
 * @export
 */
export const TablesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TablesApiFp(configuration)
    return {
        /**
         * 
         * @param {GrpcCreatePanoramaRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesCreatePanorama(body: GrpcCreatePanoramaRequest, options?: any): AxiosPromise<GrpcCreatePanoramaResponse> {
            return localVarFp.tablesCreatePanorama(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GrpcCreatePointRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesCreatePoint(body: GrpcCreatePointRequest, options?: any): AxiosPromise<GrpcCreatePointResponse> {
            return localVarFp.tablesCreatePoint(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GrpcCreateRoomRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesCreateRoom(body: GrpcCreateRoomRequest, options?: any): AxiosPromise<GrpcCreateRoomResponse> {
            return localVarFp.tablesCreateRoom(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GrpcCreateTableRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesCreateTable(body: GrpcCreateTableRequest, options?: any): AxiosPromise<GrpcCreateTableResponse> {
            return localVarFp.tablesCreateTable(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GrpcCreateTransitionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesCreateTransition(body: GrpcCreateTransitionRequest, options?: any): AxiosPromise<GrpcCreateTransitionResponse> {
            return localVarFp.tablesCreateTransition(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesDeletePanorama(id?: string, options?: any): AxiosPromise<GrpcDeletePanoramaResponse> {
            return localVarFp.tablesDeletePanorama(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesDeletePoint(id?: string, options?: any): AxiosPromise<GrpcDeletePointResponse> {
            return localVarFp.tablesDeletePoint(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [id] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesDeleteRoom(id?: string, options?: any): AxiosPromise<GrpcDeleteRoomResponse> {
            return localVarFp.tablesDeleteRoom(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesDeleteTable(id: string, options?: any): AxiosPromise<GrpcDeleteTableResponse> {
            return localVarFp.tablesDeleteTable(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesDeleteTransition(id: string, options?: any): AxiosPromise<GrpcDeleteTransitionResponse> {
            return localVarFp.tablesDeleteTransition(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} roomId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesReadPanoramasOfRoom(roomId: string, options?: any): AxiosPromise<GrpcReadPanoramasOfRoomResponse> {
            return localVarFp.tablesReadPanoramasOfRoom(roomId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} panoramaId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesReadPointsOfPanorama(panoramaId: string, options?: any): AxiosPromise<GrpcReadPointsOfPanoramaResponse> {
            return localVarFp.tablesReadPointsOfPanorama(panoramaId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} roomId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesReadRoomsById(roomId: string, options?: any): AxiosPromise<GrpcReadRoomsByIdResponse> {
            return localVarFp.tablesReadRoomsById(roomId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} projectId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesReadRoomsOfProject(projectId: string, options?: any): AxiosPromise<GrpcReadRoomsOfProjectResponse> {
            return localVarFp.tablesReadRoomsOfProject(projectId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} roomId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesReadTablesOfRoom(roomId: string, options?: any): AxiosPromise<GrpcReadTablesOfRoomResponse> {
            return localVarFp.tablesReadTablesOfRoom(roomId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} panoramaId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesReadTransitionsOfPanorama(panoramaId: string, options?: any): AxiosPromise<GrpcReadTransitionsOfPanoramaResponse> {
            return localVarFp.tablesReadTransitionsOfPanorama(panoramaId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GrpcUpdatePanoramaRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesUpdatePanorama(body: GrpcUpdatePanoramaRequest, options?: any): AxiosPromise<GrpcUpdatePanoramaResponse> {
            return localVarFp.tablesUpdatePanorama(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GrpcUpdatePointRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesUpdatePoint(body: GrpcUpdatePointRequest, options?: any): AxiosPromise<GrpcUpdatePointResponse> {
            return localVarFp.tablesUpdatePoint(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GrpcUpdateRoomRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesUpdateRoom(body: GrpcUpdateRoomRequest, options?: any): AxiosPromise<GrpcUpdateRoomResponse> {
            return localVarFp.tablesUpdateRoom(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GrpcUpdateTableRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesUpdateTable(body: GrpcUpdateTableRequest, options?: any): AxiosPromise<GrpcUpdateTableResponse> {
            return localVarFp.tablesUpdateTable(body, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GrpcUpdateTransitionRequest} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tablesUpdateTransition(body: GrpcUpdateTransitionRequest, options?: any): AxiosPromise<GrpcUpdateTransitionResponse> {
            return localVarFp.tablesUpdateTransition(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TablesApi - object-oriented interface
 * @export
 * @class TablesApi
 * @extends {BaseAPI}
 */
export class TablesApi extends BaseAPI {
    /**
     * 
     * @param {GrpcCreatePanoramaRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TablesApi
     */
    public tablesCreatePanorama(body: GrpcCreatePanoramaRequest, options?: AxiosRequestConfig) {
        return TablesApiFp(this.configuration).tablesCreatePanorama(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GrpcCreatePointRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TablesApi
     */
    public tablesCreatePoint(body: GrpcCreatePointRequest, options?: AxiosRequestConfig) {
        return TablesApiFp(this.configuration).tablesCreatePoint(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GrpcCreateRoomRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TablesApi
     */
    public tablesCreateRoom(body: GrpcCreateRoomRequest, options?: AxiosRequestConfig) {
        return TablesApiFp(this.configuration).tablesCreateRoom(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GrpcCreateTableRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TablesApi
     */
    public tablesCreateTable(body: GrpcCreateTableRequest, options?: AxiosRequestConfig) {
        return TablesApiFp(this.configuration).tablesCreateTable(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GrpcCreateTransitionRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TablesApi
     */
    public tablesCreateTransition(body: GrpcCreateTransitionRequest, options?: AxiosRequestConfig) {
        return TablesApiFp(this.configuration).tablesCreateTransition(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TablesApi
     */
    public tablesDeletePanorama(id?: string, options?: AxiosRequestConfig) {
        return TablesApiFp(this.configuration).tablesDeletePanorama(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TablesApi
     */
    public tablesDeletePoint(id?: string, options?: AxiosRequestConfig) {
        return TablesApiFp(this.configuration).tablesDeletePoint(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [id] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TablesApi
     */
    public tablesDeleteRoom(id?: string, options?: AxiosRequestConfig) {
        return TablesApiFp(this.configuration).tablesDeleteRoom(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TablesApi
     */
    public tablesDeleteTable(id: string, options?: AxiosRequestConfig) {
        return TablesApiFp(this.configuration).tablesDeleteTable(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TablesApi
     */
    public tablesDeleteTransition(id: string, options?: AxiosRequestConfig) {
        return TablesApiFp(this.configuration).tablesDeleteTransition(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} roomId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TablesApi
     */
    public tablesReadPanoramasOfRoom(roomId: string, options?: AxiosRequestConfig) {
        return TablesApiFp(this.configuration).tablesReadPanoramasOfRoom(roomId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} panoramaId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TablesApi
     */
    public tablesReadPointsOfPanorama(panoramaId: string, options?: AxiosRequestConfig) {
        return TablesApiFp(this.configuration).tablesReadPointsOfPanorama(panoramaId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} roomId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TablesApi
     */
    public tablesReadRoomsById(roomId: string, options?: AxiosRequestConfig) {
        return TablesApiFp(this.configuration).tablesReadRoomsById(roomId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} projectId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TablesApi
     */
    public tablesReadRoomsOfProject(projectId: string, options?: AxiosRequestConfig) {
        return TablesApiFp(this.configuration).tablesReadRoomsOfProject(projectId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} roomId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TablesApi
     */
    public tablesReadTablesOfRoom(roomId: string, options?: AxiosRequestConfig) {
        return TablesApiFp(this.configuration).tablesReadTablesOfRoom(roomId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} panoramaId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TablesApi
     */
    public tablesReadTransitionsOfPanorama(panoramaId: string, options?: AxiosRequestConfig) {
        return TablesApiFp(this.configuration).tablesReadTransitionsOfPanorama(panoramaId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GrpcUpdatePanoramaRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TablesApi
     */
    public tablesUpdatePanorama(body: GrpcUpdatePanoramaRequest, options?: AxiosRequestConfig) {
        return TablesApiFp(this.configuration).tablesUpdatePanorama(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GrpcUpdatePointRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TablesApi
     */
    public tablesUpdatePoint(body: GrpcUpdatePointRequest, options?: AxiosRequestConfig) {
        return TablesApiFp(this.configuration).tablesUpdatePoint(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GrpcUpdateRoomRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TablesApi
     */
    public tablesUpdateRoom(body: GrpcUpdateRoomRequest, options?: AxiosRequestConfig) {
        return TablesApiFp(this.configuration).tablesUpdateRoom(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GrpcUpdateTableRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TablesApi
     */
    public tablesUpdateTable(body: GrpcUpdateTableRequest, options?: AxiosRequestConfig) {
        return TablesApiFp(this.configuration).tablesUpdateTable(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GrpcUpdateTransitionRequest} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TablesApi
     */
    public tablesUpdateTransition(body: GrpcUpdateTransitionRequest, options?: AxiosRequestConfig) {
        return TablesApiFp(this.configuration).tablesUpdateTransition(body, options).then((request) => request(this.axios, this.basePath));
    }
}


